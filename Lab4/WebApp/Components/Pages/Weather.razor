@page "/weather"
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<div class="mb-3">
    <button class="btn btn-primary me-2" @onclick="ToggleWarmDays">
        @(_showOnlyWarmDays ? "Show all days" : "Show only warm days")
    </button>
    <button class="btn btn-secondary me-2" @onclick="SortAlphabetical" disabled="@_showOnlyWarmDays">
        @(_sortBySummary ? "Show original order" : "Sort by summary")
    </button>
    <span class="text-muted">Warm days: @_warmDays.Count</span>
    <br/>
    <br />
    <input class="form-control" placeholder="Search for summary..." 
           @bind="searchTerm" @bind:event="oninput" />
</div>

@if (_forecasts.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in DisplayedForecasts)
            {
                <tr class="@(IsWarmDay(forecast) ? "table-warning" : "")">
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast> _forecasts = new();
    private List<WeatherForecast> _warmDays = new();
    private bool _showOnlyWarmDays = false;
    private bool _sortBySummary = false;
    private string searchTerm = string.Empty;
    private const int WarmTemperatureThreshold = 15;

    private IEnumerable<WeatherForecast> DisplayedForecasts
    {
        get
        {
            var query = _showOnlyWarmDays ? _warmDays.AsEnumerable() : _forecasts.AsEnumerable();
            
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                query = query.Where(f => f.Summary!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }
            
            return _sortBySummary 
                ? query.OrderBy(f => f.Summary) 
                : query.OrderBy(f => f.Date);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // Simulating API call delay

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        _forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToList();

        UpdateWarmDays();
    }

    private void ToggleWarmDays()
    {
        _showOnlyWarmDays = !_showOnlyWarmDays;
    }

    private void UpdateWarmDays()
    {
        _warmDays = _forecasts
            .Where(IsWarmDay)
            .OrderBy(f => f.Date)
            .ToList();
    }
    
    private bool IsWarmDay(WeatherForecast forecast) => 
        forecast.TemperatureC > WarmTemperatureThreshold;
        
    private void SortAlphabetical()
    {
        _sortBySummary = !_sortBySummary;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}